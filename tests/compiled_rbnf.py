# File automatically generated by RBNF.

from rbnf.bootstrap import loader as ruiko
mylang = ruiko.Language('mylang')


@mylang
class Space(ruiko.Lexer):
    @staticmethod
    def regex():
        return ['\\s']


@mylang
class Name(ruiko.Lexer):
    @staticmethod
    def regex():
        return ['[a-zA-Z]+']


@mylang
class Num(ruiko.Lexer):
    @staticmethod
    def regex():
        return ['\\d+']


@mylang
class Alpha(ruiko.Lexer):
    @staticmethod
    def constants():
        return ['a', 'b', 'c']

    @staticmethod
    def cast():
        return True


@mylang
class Z(ruiko.Parser):
    @staticmethod
    def bnf():
        return ruiko.And([
            ruiko.Seq(ruiko.N('Alpha'), 1, -1),
            ruiko.Bind('n1', ruiko.N('Num')),
            ruiko.Bind('n2', ruiko.N('Num'))
        ])

    @staticmethod
    def fail_if(tokens, state):
        (n1, n2) = map(state.ctx.get, ('n1', 'n2'))
        d1 = int(n1.value)
        d2 = int(n2.value)
        return (d1 > d2)


mylang.ignore('Space')
mylang.build()
