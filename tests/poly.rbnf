import std.common.[Number Name Space]
ignore [Space]
Numeric ::= Number as integer ['.' Number as floating]
            rewrite float(integer.value + '.' + floating.value) if floating else int(integer.value)
Term ::= [Numeric as coef] Name as root ['^' Number as power] | Numeric as coef
        with
            return not root or root.value == 'x'
        rewrite

            return coef if coef else 1, int(power.value) if power else 1 if root else 0

Add ::= ('-' as neg | '+') Term as term
        rewrite
            coef, power = term
            return -coef if neg else coef, power
Poly ::=  ['-' as neg] Term as head Add* as seq
        rewrite
            class Polynomial(dict):
                def __missing__(self, k):
                    return 0
            mapping = Polynomial()
            coef, power = head
            mapping[power] = -coef if neg else coef
            if any(seq):
                for coef, power in seq:
                    mapping[power] += coef
            return sorted(mapping.items(), key=lambda kv: kv[0])
