import std.common.[Number Name Space]
ignore [Space]
Numeric ::= integer=Number ['.' floating=Number]
            ->
                float(integer.value + '.' + floating.value) \
                if floating else \
                int(integer.value)

Term ::= [coef=Numeric] Name as root ['^' power=Number] | coef=Numeric
        with
            not root or root.value == 'x'
        ->
            coef = coef if coef else 1
            power = int(power.value) if power else 1 if root else 0
            coef, power

Add ::= (neg='-' | '+') term=Term -> coef, power = term
                                     -coef if neg else coef, power

Poly ::=  [neg='-'] head=Term seq=Add*
        ->
            class Polynomial(dict):
                def __missing__(self, k):
                    return 0

            mapping = Polynomial()
            coef, power = head

            mapping[power] = -coef if neg else coef

            if any(seq):
                for coef, power in seq:
                    mapping[power] += coef

            sorted(mapping.items(), key=lambda kv: kv[0])
